/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.49.1
  Forc version: 0.40.1
  Fuel-Core version: 0.19.1
*/

import { Interface, Contract } from "fuels";
import type { Provider, Account, AbstractAddress } from "fuels";
import type { MarketAbi, MarketAbiInterface } from "../MarketAbi";

const _abi = {
  "types": [
    {
      "typeId": 0,
      "type": "()",
      "components": [],
      "typeParameters": null
    },
    {
      "typeId": 1,
      "type": "b256",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 2,
      "type": "bool",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 3,
      "type": "enum AuthorizationError",
      "components": [
        {
          "name": "SenderNotOperator",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 4,
      "type": "enum Identity",
      "components": [
        {
          "name": "Address",
          "type": 10,
          "typeArguments": null
        },
        {
          "name": "ContractId",
          "type": 11,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 5,
      "type": "enum MarketError",
      "components": [
        {
          "name": "InvalidRoundId",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidClosingTime",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "MarketNotYetOpen",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "RoundNotYetFinalized",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "PreviousRoundNotFinalized",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "InvalidReward",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ErrorClaimingReward",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "MarketInitializedAlready",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 6,
      "type": "enum Option",
      "components": [
        {
          "name": "None",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "Some",
          "type": 9,
          "typeArguments": null
        }
      ],
      "typeParameters": [
        9
      ]
    },
    {
      "typeId": 7,
      "type": "enum PositionError",
      "components": [
        {
          "name": "NoPositionFoundInRound",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "PositionExistForCallerInRound",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "NoValidPositionInRound",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 8,
      "type": "enum RoundError",
      "components": [
        {
          "name": "NotYetTimeToFinalize",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "FinalizedAlready",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "EntryClosed",
          "type": 0,
          "typeArguments": null
        },
        {
          "name": "ClosedAlready",
          "type": 0,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 9,
      "type": "generic T",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 10,
      "type": "struct Address",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 11,
      "type": "struct ContractId",
      "components": [
        {
          "name": "value",
          "type": 1,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 12,
      "type": "struct NewRoundEvent",
      "components": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "opening_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "entry_deadline",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 13,
      "type": "struct Position",
      "components": [
        {
          "name": "wager",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "option",
          "type": 19,
          "typeArguments": null
        },
        {
          "name": "price",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 14,
      "type": "struct PredictedEvent",
      "components": [
        {
          "name": "account",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "price",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "wager",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "option",
          "type": 19,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 15,
      "type": "struct RewardClaim",
      "components": [
        {
          "name": "account",
          "type": 4,
          "typeArguments": null
        },
        {
          "name": "amount",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 16,
      "type": "struct Round",
      "components": [
        {
          "name": "opening_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "entry_deadline",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_price",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "total_wager",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "percentage_reward",
          "type": 19,
          "typeArguments": null
        },
        {
          "name": "is_finalized",
          "type": 2,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 17,
      "type": "struct RoundFinalizedEvent",
      "components": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "total_wager",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_price",
          "type": 18,
          "typeArguments": null
        }
      ],
      "typeParameters": null
    },
    {
      "typeId": 18,
      "type": "u64",
      "components": null,
      "typeParameters": null
    },
    {
      "typeId": 19,
      "type": "u8",
      "components": null,
      "typeParameters": null
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        }
      ],
      "name": "claim_reward",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_price",
          "type": 18,
          "typeArguments": null
        }
      ],
      "name": "finalize_round",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": [
          {
            "name": "",
            "type": 16,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "oracle_feed_id",
          "type": 1,
          "typeArguments": null
        }
      ],
      "name": "initialize",
      "output": {
        "name": "",
        "type": 0,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "wager",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "price",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "option",
          "type": 19,
          "typeArguments": null
        }
      ],
      "name": "predict",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": [
          {
            "name": "",
            "type": 13,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "opening_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "closing_time",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "entry_deadline",
          "type": 18,
          "typeArguments": null
        }
      ],
      "name": "start_next_round",
      "output": {
        "name": "",
        "type": 6,
        "typeArguments": [
          {
            "name": "",
            "type": 16,
            "typeArguments": null
          }
        ]
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read",
            "write"
          ]
        }
      ]
    },
    {
      "inputs": [
        {
          "name": "round_id",
          "type": 18,
          "typeArguments": null
        },
        {
          "name": "account",
          "type": 4,
          "typeArguments": null
        }
      ],
      "name": "get_account_position",
      "output": {
        "name": "",
        "type": 13,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_last_round",
      "output": {
        "name": "",
        "type": 16,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_last_round_id",
      "output": {
        "name": "",
        "type": 18,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_market_controller",
      "output": {
        "name": "",
        "type": 11,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    },
    {
      "inputs": [],
      "name": "get_market_reward",
      "output": {
        "name": "",
        "type": 19,
        "typeArguments": null
      },
      "attributes": [
        {
          "name": "storage",
          "arguments": [
            "read"
          ]
        }
      ]
    }
  ],
  "loggedTypes": [
    {
      "logId": 0,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 1,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": 2,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": 3,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 4,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 5,
      "loggedType": {
        "name": "",
        "type": 15,
        "typeArguments": []
      }
    },
    {
      "logId": 6,
      "loggedType": {
        "name": "",
        "type": 15,
        "typeArguments": []
      }
    },
    {
      "logId": 7,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 8,
      "loggedType": {
        "name": "",
        "type": 3,
        "typeArguments": []
      }
    },
    {
      "logId": 9,
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": 10,
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": 11,
      "loggedType": {
        "name": "",
        "type": 17,
        "typeArguments": []
      }
    },
    {
      "logId": 12,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 13,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 14,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 15,
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": 16,
      "loggedType": {
        "name": "",
        "type": 8,
        "typeArguments": []
      }
    },
    {
      "logId": 17,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": 18,
      "loggedType": {
        "name": "",
        "type": 14,
        "typeArguments": []
      }
    },
    {
      "logId": 19,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 20,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 21,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    },
    {
      "logId": 22,
      "loggedType": {
        "name": "",
        "type": 12,
        "typeArguments": []
      }
    },
    {
      "logId": 23,
      "loggedType": {
        "name": "",
        "type": 7,
        "typeArguments": []
      }
    },
    {
      "logId": 24,
      "loggedType": {
        "name": "",
        "type": 5,
        "typeArguments": []
      }
    }
  ],
  "messagesTypes": [],
  "configurables": [
    {
      "name": "OPERATOR",
      "configurableType": {
        "name": "",
        "type": 4,
        "typeArguments": []
      },
      "offset": 15596
    }
  ]
}

export class MarketAbi__factory {
  static readonly abi = _abi
  static createInterface(): MarketAbiInterface {
    return new Interface(_abi) as unknown as MarketAbiInterface
  }
  static connect(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider
  ): MarketAbi {
    return new Contract(id, _abi, accountOrProvider) as unknown as MarketAbi
  }
}
