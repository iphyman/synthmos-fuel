/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.49.1
  Forc version: 0.40.1
  Fuel-Core version: 0.19.1
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Enum } from "./common";

export enum AuthorizationErrorInput { CallerNotMarket = 'CallerNotMarket', CallerNotManager = 'CallerNotManager' };
export enum AuthorizationErrorOutput { CallerNotMarket = 'CallerNotMarket', CallerNotManager = 'CallerNotManager' };
export type IdentityInput = Enum<{ Address: AddressInput, ContractId: ContractIdInput }>;
export type IdentityOutput = Enum<{ Address: AddressOutput, ContractId: ContractIdOutput }>;
export enum MarketControllerErrorInput { CannotDepositZeroAmount = 'CannotDepositZeroAmount', NoBalanceForAccount = 'NoBalanceForAccount', InsufficientAccountBalance = 'InsufficientAccountBalance', InvalidProtocolFee = 'InvalidProtocolFee', InvalidMarketReward = 'InvalidMarketReward', FeeReceipientCannotBeNullAddress = 'FeeReceipientCannotBeNullAddress', FaucetAmountTooMuch = 'FaucetAmountTooMuch', MarketAlreadyExist = 'MarketAlreadyExist', CannotWithdrawZeroAmount = 'CannotWithdrawZeroAmount', OnlySynthTokenAllowed = 'OnlySynthTokenAllowed', MarketBytecodeNotSet = 'MarketBytecodeNotSet', MarketBytecodeMismatch = 'MarketBytecodeMismatch', CannotClaimZeroAmount = 'CannotClaimZeroAmount', MarketDoesNotExist = 'MarketDoesNotExist' };
export enum MarketControllerErrorOutput { CannotDepositZeroAmount = 'CannotDepositZeroAmount', NoBalanceForAccount = 'NoBalanceForAccount', InsufficientAccountBalance = 'InsufficientAccountBalance', InvalidProtocolFee = 'InvalidProtocolFee', InvalidMarketReward = 'InvalidMarketReward', FeeReceipientCannotBeNullAddress = 'FeeReceipientCannotBeNullAddress', FaucetAmountTooMuch = 'FaucetAmountTooMuch', MarketAlreadyExist = 'MarketAlreadyExist', CannotWithdrawZeroAmount = 'CannotWithdrawZeroAmount', OnlySynthTokenAllowed = 'OnlySynthTokenAllowed', MarketBytecodeNotSet = 'MarketBytecodeNotSet', MarketBytecodeMismatch = 'MarketBytecodeMismatch', CannotClaimZeroAmount = 'CannotClaimZeroAmount', MarketDoesNotExist = 'MarketDoesNotExist' };

export type AddressInput = { value: string };
export type AddressOutput = AddressInput;
export type ContractIdInput = { value: string };
export type ContractIdOutput = ContractIdInput;
export type DepositEventInput = { account: IdentityInput, amount: BigNumberish, created_on: BigNumberish };
export type DepositEventOutput = { account: IdentityOutput, amount: BN, created_on: BN };
export type MarketByteCodeInitEventInput = { bytecode_root: string };
export type MarketByteCodeInitEventOutput = MarketByteCodeInitEventInput;
export type MarketWhitelistedEventInput = { oracle_feed_id: string, market_address: ContractIdInput };
export type MarketWhitelistedEventOutput = { oracle_feed_id: string, market_address: ContractIdOutput };
export type ProtocolFeeReceipientInput = { receipient: IdentityInput };
export type ProtocolFeeReceipientOutput = { receipient: IdentityOutput };
export type ProtocolFeeSetEventInput = { protocol_fee: BigNumberish };
export type ProtocolFeeSetEventOutput = { protocol_fee: number };

export type MarketControllerAbiConfigurables = {
  MANAGER: IdentityInput;
};

interface MarketControllerAbiInterface extends Interface {
  functions: {
    claim_reward: FunctionFragment;
    deposit: FunctionFragment;
    deposit_for: FunctionFragment;
    initialize: FunctionFragment;
    set_market_reward: FunctionFragment;
    set_protocol_fee: FunctionFragment;
    set_protocol_fee_recipient: FunctionFragment;
    set_reward_token: FunctionFragment;
    stake_from_balance: FunctionFragment;
    whitelist_market: FunctionFragment;
    withdraw: FunctionFragment;
    faucet: FunctionFragment;
    get_balance: FunctionFragment;
    get_market: FunctionFragment;
    get_market_reward: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'claim_reward', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit_for', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'initialize', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_market_reward', values: [ContractIdInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_protocol_fee', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_protocol_fee_recipient', values: [IdentityInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'set_reward_token', values: [ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'stake_from_balance', values: [IdentityInput, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'whitelist_market', values: [string, ContractIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'faucet', values: [BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_balance', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'get_market', values: [string]): Uint8Array;
  encodeFunctionData(functionFragment: 'get_market_reward', values: [ContractIdInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'claim_reward', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit_for', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'initialize', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_market_reward', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_protocol_fee', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_protocol_fee_recipient', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'set_reward_token', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'stake_from_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'whitelist_market', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'faucet', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_market', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'get_market_reward', data: BytesLike): DecodedValue;
}

export class MarketControllerAbi extends Contract {
  interface: MarketControllerAbiInterface;
  functions: {
    claim_reward: InvokeFunction<[account: IdentityInput, amount: BigNumberish], BN>;
    deposit: InvokeFunction<[], void>;
    deposit_for: InvokeFunction<[account_id: IdentityInput], void>;
    initialize: InvokeFunction<[market_bytecode_root: ContractIdInput], void>;
    set_market_reward: InvokeFunction<[market_address: ContractIdInput, reward: BigNumberish], void>;
    set_protocol_fee: InvokeFunction<[protocol_fee: BigNumberish], void>;
    set_protocol_fee_recipient: InvokeFunction<[receipient: IdentityInput], void>;
    set_reward_token: InvokeFunction<[reward_token: ContractIdInput], void>;
    stake_from_balance: InvokeFunction<[account: IdentityInput, amount: BigNumberish], void>;
    whitelist_market: InvokeFunction<[oracle_feed_id: string, market_address: ContractIdInput], void>;
    withdraw: InvokeFunction<[amount: BigNumberish], void>;
    faucet: InvokeFunction<[amount: BigNumberish], void>;
    get_balance: InvokeFunction<[], BN>;
    get_market: InvokeFunction<[oracle_feed_id: string], ContractIdOutput>;
    get_market_reward: InvokeFunction<[market_address: ContractIdInput], number>;
  };
}
